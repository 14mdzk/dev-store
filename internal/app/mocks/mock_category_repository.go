// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/icategory_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/14mdzk/dev-store/internal/app/model"
	gomock "github.com/golang/mock/gomock"
)

// MockICategoryRepository is a mock of ICategoryRepository interface.
type MockICategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICategoryRepositoryMockRecorder
}

// MockICategoryRepositoryMockRecorder is the mock recorder for MockICategoryRepository.
type MockICategoryRepositoryMockRecorder struct {
	mock *MockICategoryRepository
}

// NewMockICategoryRepository creates a new mock instance.
func NewMockICategoryRepository(ctrl *gomock.Controller) *MockICategoryRepository {
	mock := &MockICategoryRepository{ctrl: ctrl}
	mock.recorder = &MockICategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICategoryRepository) EXPECT() *MockICategoryRepositoryMockRecorder {
	return m.recorder
}

// Browse mocks base method.
func (m *MockICategoryRepository) Browse() ([]model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Browse")
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Browse indicates an expected call of Browse.
func (mr *MockICategoryRepositoryMockRecorder) Browse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Browse", reflect.TypeOf((*MockICategoryRepository)(nil).Browse))
}

// Create mocks base method.
func (m *MockICategoryRepository) Create(arg0 model.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICategoryRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICategoryRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockICategoryRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICategoryRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICategoryRepository)(nil).Delete), id)
}

// GetById mocks base method.
func (m *MockICategoryRepository) GetById(id int) (model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockICategoryRepositoryMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockICategoryRepository)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockICategoryRepository) Update(arg0 model.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICategoryRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICategoryRepository)(nil).Update), arg0)
}
